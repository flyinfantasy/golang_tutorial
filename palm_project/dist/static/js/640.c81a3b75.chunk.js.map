{"version":3,"file":"static/js/640.c81a3b75.chunk.js","mappings":"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","sources":["container/Login/Login.tsx","../node_modules/sha-1/dist/sha1.umd.js"],"sourcesContent":["import { FC, useContext, useEffect, ChangeEvent, useState, useRef } from \"react\";\nimport { NavigateFunction, useNavigate } from \"react-router-dom\";\nimport { actionCreator,Container,returnStateType } from \".\";\nimport { ContextProps } from \"../../App\";\nimport sha1 from 'sha-1'\n\nconst Login: FC = (): JSX.Element => {\n    const router:NavigateFunction = useNavigate()\n    const { setReducer,getReducer } = useContext(ContextProps)\n\n    const { loginInfo } = getReducer<returnStateType>(({ login }) => ({ loginInfo:login.loginInfo }))\n\n    const [{\n        pigeonAc,\n        pigeonPs\n    },setPageState] = useState<{\n        pigeonAc:string,\n        pigeonPs:string\n    }>({\n        pigeonAc:'',\n        pigeonPs:''\n    }) \n\n    const pigeonAcRef = useRef<string>('')\n    const pigeonPsRef = useRef<string>('')\n\n    const setVal:(type:string,{ target }:ChangeEvent<HTMLInputElement>) => void = (type,{ target }) => {\n        setPageState(prevState => {\n            const deepCopy = JSON.parse(JSON.stringify(prevState))\n            \n            deepCopy[type] = target.value\n\n            return deepCopy\n        })\n    }\n    \n    const login: () => void = () => {\n        const testAc = new RegExp(/^[0-9]*$/).test(pigeonAcRef.current)\n        if(!testAc){\n            alert('帳號格式錯誤')\n            return\n        }\n\n        if(pigeonAcRef.current === '1111' && sha1(pigeonPsRef.current) === 'c5dda332875784535da144e5d7f3862d675686a9'){\n            sessionStorage.setItem('f_token',sha1(pigeonPsRef.current))\n        }\n\n        setReducer(actionCreator,'getLoginInfo',{ pigeon_account:pigeonAcRef.current,pigeon_password:sha1(pigeonPsRef.current) })\n    }\n\n    const keyPressLogin:({ keyCode }:KeyboardEvent) => void = ({ keyCode }) => keyCode === 13 && login() \n\n    useEffect(() => {\n        if(loginInfo?.club === '1111'){\n            router({ pathname: '/club_list' })\n        } else if(loginInfo?.club && loginInfo?.club !== 'error') {\n            router({ pathname: '/dashboard/current_back' })\n        } else if(loginInfo?.club === 'error'){\n            alert('帳號或密碼錯誤')\n        }\n    }, [loginInfo])\n\n    useEffect(() => {\n        pigeonAcRef.current = pigeonAc\n        pigeonPsRef.current = pigeonPs\n    }, [pigeonAc,pigeonPs])\n\n    useEffect(() => {\n        setReducer(actionCreator,'setLoginInfo',{ club:'',currentDate:'',fromListClub: '' })\n        \n        window.addEventListener('keypress',keyPressLogin)\n\n        return () => window.removeEventListener('keypress',keyPressLogin)\n    },[])\n\n    return (\n        <Container>\n            <div className=\"container\">\n                <div className=\"img-outer\">\n                    <img src={`${process.env.PUBLIC_URL}/images/Logo.png`} />\n                </div>\n                <div className=\"split-line\"></div>\n                <input type=\"text\" placeholder=\"鴿會帳號\" value={pigeonAc} onChange={setVal.bind(this,'pigeonAc')} />\n                <input type=\"password\" placeholder=\"鴿會密碼\" value={pigeonPs} onChange={setVal.bind(this,'pigeonPs')} />\n                <div className=\"login-btn\" onClick={login}>登入</div>\n            </div>\n        </Container>\n    )\n}\n\nexport default Login","(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.sha1 = factory());\n}(this, (function () { 'use strict';\n\n  /**\n   * @file This is a SHA-1 hash generator by JavaScript.\n   * @author Hsun\n   * @description For your convenience, the code comments have been translated by Google.\n   ***/\n\n  // 消息填充位，补足长度。\n  // Message padding bits, complement the length.\n  function fillString(str) {\n    var blockAmount = ((str.length + 8) >> 6) + 1,\n      blocks = [],\n      i;\n\n    for (i = 0; i < blockAmount * 16; i++) {\n      blocks[i] = 0;\n    }\n    for (i = 0; i < str.length; i++) {\n      blocks[i >> 2] |= str.charCodeAt(i) << (24 - (i & 3) * 8);\n    }\n    blocks[i >> 2] |= 0x80 << (24 - (i & 3) * 8);\n    blocks[blockAmount * 16 - 1] = str.length * 8;\n\n    return blocks;\n  }\n\n  // 将输入的二进制数组转化为十六进制的字符串。\n  // Convert the input binary array to a hexadecimal string.\n  function binToHex(binArray) {\n    var hexString = \"0123456789abcdef\",\n      str = \"\",\n      i;\n\n    for (i = 0; i < binArray.length * 4; i++) {\n      str += hexString.charAt((binArray[i >> 2] >> ((3 - i % 4) * 8 + 4)) & 0xF) +\n        hexString.charAt((binArray[i >> 2] >> ((3 - i % 4) * 8)) & 0xF);\n    }\n\n    return str;\n  }\n\n  // 核心函数，输出为长度为5的number数组，对应160位的消息摘要。\n  // The core function, the output is a number array with a length of 5,\n  // corresponding to a 160-bit message digest.\n  function core(blockArray) {\n    var w = [],\n      a = 0x67452301,\n      b = 0xEFCDAB89,\n      c = 0x98BADCFE,\n      d = 0x10325476,\n      e = 0xC3D2E1F0,\n      olda,\n      oldb,\n      oldc,\n      oldd,\n      olde,\n      t,\n      i,\n      j;\n\n    for (i = 0; i < blockArray.length; i += 16) {  //每次处理512位 16*32\n      olda = a;\n      oldb = b;\n      oldc = c;\n      oldd = d;\n      olde = e;\n\n      for (j = 0; j < 80; j++) {  //对每个512位进行80步操作\n        if (j < 16) {\n          w[j] = blockArray[i + j];\n        } else {\n          w[j] = cyclicShift(w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16], 1);\n        }\n        t = modPlus(modPlus(cyclicShift(a, 5), ft(j, b, c, d)), modPlus(modPlus(e, w[j]), kt(j)));\n        e = d;\n        d = c;\n        c = cyclicShift(b, 30);\n        b = a;\n        a = t;\n      }\n\n      a = modPlus(a, olda);\n      b = modPlus(b, oldb);\n      c = modPlus(c, oldc);\n      d = modPlus(d, oldd);\n      e = modPlus(e, olde);\n    }\n\n    return [a, b, c, d, e];\n  }\n\n  // 根据t值返回相应得压缩函数中用到的f函数。\n  // According to the t value, return the corresponding f function used in\n  // the compression function.\n  function ft(t, b, c, d) {\n    if (t < 20) {\n      return (b & c) | ((~b) & d);\n    } else if (t < 40) {\n      return b ^ c ^ d;\n    } else if (t < 60) {\n      return (b & c) | (b & d) | (c & d);\n    } else {\n      return b ^ c ^ d;\n    }\n  }\n\n  // 根据t值返回相应得压缩函数中用到的K值。\n  // According to the t value, return the corresponding K value used in\n  // the compression function.\n  function kt(t) {\n    return (t < 20) ? 0x5A827999 :\n      (t < 40) ? 0x6ED9EBA1 :\n        (t < 60) ? 0x8F1BBCDC : 0xCA62C1D6;\n  }\n\n  // 模2的32次方加法，因为JavaScript的number是双精度浮点数表示，所以将32位数拆成高16位和低16位分别进行相加\n  // Modulo 2 to the 32nd power addition, because JavaScript's number is a\n  // double-precision floating-point number, so the 32-bit number is split\n  // into the upper 16 bits and the lower 16 bits are added separately.\n  function modPlus(x, y) {\n    var low = (x & 0xFFFF) + (y & 0xFFFF),\n      high = (x >> 16) + (y >> 16) + (low >> 16);\n\n    return (high << 16) | (low & 0xFFFF);\n  }\n\n  // 对输入的32位的num二进制数进行循环左移 ,因为JavaScript的number是双精度浮点数表示，所以移位需需要注意\n  // Rotate left of the input 32-bit num binary number, because JavaScript's\n  // number is a double-precision floating-point number, so you need to pay\n  //  attention to the shift.\n  function cyclicShift(num, k) {\n    return (num << k) | (num >>> (32 - k));\n  }\n\n  // 主函数根据输入的消息字符串计算消息摘要，返回十六进制表示的消息摘要\n  // The main function calculates the message digest based on the input message\n  // string and returns the message digest in hexadecimal.\n  function sha1(s) {\n    return binToHex(core(fillString(s)));\n  }\n\n  return sha1;\n\n})));\n"],"names":["router","useNavigate","_useContext","useContext","ContextProps","setReducer","loginInfo","getReducer","_ref","login","_useState","useState","pigeonAc","pigeonPs","_useState2","_slicedToArray","_useState2$","setPageState","pigeonAcRef","useRef","pigeonPsRef","setVal","type","_ref2","target","prevState","deepCopy","JSON","parse","stringify","value","RegExp","test","current","sha1","sessionStorage","setItem","actionCreator","pigeon_account","pigeon_password","alert","keyPressLogin","_ref3","keyCode","useEffect","club","pathname","currentDate","fromListClub","window","addEventListener","removeEventListener","_jsx","Container","children","_jsxs","className","src","concat","process","placeholder","onChange","bind","_this","onClick","module","exports","fillString","str","i","blockAmount","length","blocks","charCodeAt","binToHex","binArray","hexString","charAt","core","blockArray","olda","oldb","oldc","oldd","olde","t","j","w","a","b","c","d","e","cyclicShift","modPlus","ft","kt","x","y","low","num","k","s","factory"],"sourceRoot":""}